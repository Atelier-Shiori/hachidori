// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import AppKit;
@import WebKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSHTTPURLResponse (SWIFT_EXTENSION(OAuth2))
/**
  Format HTTP status and response headers as is customary.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface NSHTTPURLResponse (SWIFT_EXTENSION(OAuth2))
/**
  A localized string explaining the current \code
  statusCode
  \endcode.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull statusString;
@end


/**
  An URLSession delegate that allows you to use self-signed SSL certificates.
  Doing so is a REALLY BAD IDEA, even in development environments where you can use real, free certificates that are valid a few months.
  Still, sometimes you’ll have to do this so this class is provided, but DO NOT SUBMIT your app using self-signed SSL certs to the App
  Store. You have been warned!
*/
SWIFT_CLASS("_TtC6OAuth229OAuth2DebugURLSessionDelegate")
@interface OAuth2DebugURLSessionDelegate : NSObject <NSURLSessionDelegate>
/**
  The host to allow a self-signed SSL certificate for.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull host;
/**
  Designated initializer.
  \param host The host to which the exception should apply

*/
- (nonnull instancetype)initWithHost:(NSString * _Nonnull)host OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class WKWebView;
@class NSCoder;
@class WKNavigation;
@class NSBundle;

/**
  A view controller that allows you to display the login/authorization screen.
*/
SWIFT_CLASS("_TtC6OAuth223OAuth2WebViewController")
@interface OAuth2WebViewController : NSViewController <WKNavigationDelegate, NSWindowDelegate>
/**
  Designated initializer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Configure the view to be shown as sheet, false by default; must be present before the view gets loaded.
*/
@property (nonatomic) BOOL willBecomeSheet;
/**
  The URL to load on first show.
*/
@property (nonatomic, copy) NSURL * _Nullable startURL;
/**
  The URL string to intercept and respond to.
*/
@property (nonatomic, copy) NSString * _Nullable interceptURLString;
/**
  Internally used; the URL components, derived from \code
  interceptURLString
  \endcode, comprising the URL to be intercepted.
*/
@property (nonatomic, copy) NSURLComponents * _Nullable interceptComponents;
/**
  Closure called when the web view gets asked to load the redirect URL, specified in \code
  interceptURLString
  \endcode. Return a Bool indicating
  that you’ve intercepted the URL.
*/
@property (nonatomic, copy) BOOL (^ _Nullable onIntercept)(NSURL * _Nonnull);
/**
  Called when the web view is about to be dismissed manually.
*/
@property (nonatomic, copy) void (^ _Nullable onWillCancel)(void);
/**
  Our web view; implicitly unwrapped so do not attempt to use it unless isViewLoaded() returns true.
*/
@property (nonatomic, strong) WKWebView * _Null_unspecified webView;
/**
  Initializer from an NSCoder.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Default web view window width; defaults to 600.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat webViewWindowWidth;)
+ (CGFloat)webViewWindowWidth;
/**
  Default web view window height; defaults to 500.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat webViewWindowHeight;)
+ (CGFloat)webViewWindowHeight;
/**
  Override to fully load the view; adds a \code
  WKWebView
  \endcode, optionally a dismiss button, and shows the loading indicator.
*/
- (void)loadView;
/**
  This override starts loading \code
  startURL
  \endcode if nothing has been loaded yet, e.g. on first show.
*/
- (void)viewWillAppear;
/**
  Override to set the window delegate to self.
*/
- (void)viewDidAppear;
/**
  Adds a loading indicator view to the center of the view.
*/
- (void)showLoadingIndicator;
/**
  Hides the loading indicator, if it is currently being shown.
*/
- (void)hideLoadingIndicator;
/**
  Convenience method to show an error message; will add the error to a <p> element shown centered in the web view.
*/
- (void)showErrorMessage:(NSString * _Nonnull)message animated:(BOOL)animated;
/**
  Loads the given URL in the web view.
  \param url The URL to load

*/
- (void)loadURL:(NSURL * _Nonnull)url;
/**
  Tells the web view to go back in history.
*/
- (void)goBack:(id _Nullable)sender;
/**
  Tells the web view to stop loading the current page, then calls the \code
  onWillCancel
  \endcode block if it has a value.
*/
- (void)cancel:(id _Nullable)sender;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (nullable instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
